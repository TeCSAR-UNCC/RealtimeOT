
#ifndef MOG_PARAMS_CFG_H
#define MOG_PARAMS_CFG_H

/****************** Include Files ********************/
#include "xil_types.h"
#include "xstatus.h"

#define MIXTUREOFGAUSSIANS_S00_AXI_SLV_BASE_ADDRESS 0x43C00000
#define MIXTUREOFGAUSSIANS_S00_AXI_SLV_REG0_OFFSET 0
#define MIXTUREOFGAUSSIANS_S00_AXI_SLV_REG1_OFFSET 4
#define MIXTUREOFGAUSSIANS_S00_AXI_SLV_REG2_OFFSET 8
#define MIXTUREOFGAUSSIANS_S00_AXI_SLV_REG3_OFFSET 12


/**************************** Type Definitions *****************************/
/**
 *
 * Write a value to a MIXTUREOFGAUSSIANS register. A 32 bit write is performed.
 * If the component is implemented in a smaller width, only the least
 * significant data is written.
 *
 * @param   BaseAddress is the base address of the MIXTUREOFGAUSSIANSdevice.
 * @param   RegOffset is the register offset from the base to write to.
 * @param   Data is the data written to the register.
 *
 * @return  None.
 *
 * @note
 * C-style signature:
 * 	void MIXTUREOFGAUSSIANS_mWriteReg(u32 BaseAddress, unsigned RegOffset, u32 Data)
 *
 */
#define MIXTUREOFGAUSSIANS_mWriteReg(BaseAddress, RegOffset, Data) \
  	Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))

/**
 *
 * Read a value from a MIXTUREOFGAUSSIANS register. A 32 bit read is performed.
 * If the component is implemented in a smaller width, only the least
 * significant data is read from the register. The most significant data
 * will be read as 0.
 *
 * @param   BaseAddress is the base address of the MIXTUREOFGAUSSIANS device.
 * @param   RegOffset is the register offset from the base to write to.
 *
 * @return  Data is the data from the register.
 *
 * @note
 * C-style signature:
 * 	u32 MIXTUREOFGAUSSIANS_mReadReg(u32 BaseAddress, unsigned RegOffset)
 *
 */
#define MIXTUREOFGAUSSIANS_mReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))

/************************** Function Prototypes ****************************/
/**
 *
 * Run a self-test on the driver/device. Note this may be a destructive test if
 * resets of the device are performed.
 *
 * If the hardware system is not built correctly, this function may never
 * return to the caller.
 *
 * @param   baseaddr_p is the base address of the MIXTUREOFGAUSSIANS instance to be worked on.
 *
 * @return
 *
 *    - XST_SUCCESS   if all self-test code passed
 *    - XST_FAILURE   if any self-test code failed
 *
 * @note    Caching must be turned off for this function to work.
 * @note    Self test may fail if data memory and device are not on the same bus.
 *
 */
XStatus mog_params_cfg_SelfTest(void * baseaddr_p);


/**
 *
 * MoG parameters configuraion functions.
 *
 * This functions receives 4 values and based on them write
 * the necessary value in the corresponding MMRs.
 *
 */
int mog_params_cfg (
		u32 LEARNING_FACTOR,
		u32 FG_THRESHOLD,
		u32 MD_THRESHOLD,
		u32 FGDM_THRESHOLD,
		u32 base_address
);

int match_det_threshold_config (u32 match_det_threshold, u32 base_address);
int learnfact_config (u32 learnfact, u32 base_address);
int foreground_threshold_config (u32 foreground_threshold, u32 base_address)
int fg_match_det_threshold_config (u32 fg_match_det_threshold, u32 base_address);

#endif // MOG_PARAMS_CFG_H
